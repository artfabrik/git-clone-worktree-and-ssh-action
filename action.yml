name:  Install SSH key and Clone Repo (in separate worktree)

inputs:
  clean:
    type: boolean
    default: false
  installSSHKey:
    type: boolean
    default: true
    required: false
  sshKey:
    required: true

runs:
  using: "composite"
  steps:
    - name: Install SSH key
      shell: bash
      if: ${{inputs.installSSHKey == 'true'}}
      run: |
        SSH_KEY='${{inputs.sshKey}}'
        sudo mkdir -p ~/.ssh
        echo "${SSH_KEY}" > ~/.ssh/id_rsa
        # Add GitHub to the SSH known hosts file
        for ip in $(dig @8.8.8.8 github.com +short); do \
          ssh-keyscan github.com,$ip; \
          ssh-keyscan $ip; \
        done 2>/dev/null >> ~/.ssh/known_hosts
        chmod 400 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/known_hosts

    - name: Git clone repo and create worktree
      shell: bash
      run: |
        # check if .git is indeed a git repo (for some reason sometimes most files get deleted in the directory and in the worktrees
        # and otherwise cleanup all files there

        if ! ([ -d .git ] && cd .git && git rev-parse --is-inside-git-dir); then
          rm -rf * .*
        fi

        # clone or update git repo

        if [ ! -d ".git" ]; then
          git clone --mirror git@github.com:${GITHUB_REPOSITORY}.git .git
        fi

        # fetch all refs and add origin remote
        cd .git
        git remote rm origin
        git remote add origin git@github.com:${GITHUB_REPOSITORY}.git
        git fetch --all
        cd ..
      
        # create or update worktree

        if [ -d "${GITHUB_REF_NAME}" ]; then
          cd ${GITHUB_REF_NAME}
          if [ "${GITHUB_REF_NAME}" != "$(git rev-parse --abbrev-ref HEAD)" ]; then
            cd ..
            rm -r "${GITHUB_REF_NAME}"        
            git worktree add -f "${GITHUB_REF_NAME}"
            cd "${GITHUB_REF_NAME}"
          fi

          # be able to have worktree specific config like e.g. hooks
          git config extensions.worktreeConfig true
          git config --worktree core.bare false

          # for files that are 'assume-unchanged' because git reset --hard fails otherwise

          ASSUME_UNCHANGED=$((git ls-files -v | grep '^h' || true) | sed 's/^h //g')
          if [[ $ASSUME_UNCHANGED = *[![:space:]]* ]]; then
            echo "resetting assume-unchanged files"
            echo "$ASSUME_UNCHANGED"
            echo $ASSUME_UNCHANGED | xargs -n1 git update-index --no-assume-unchanged
            echo $ASSUME_UNCHANGED | xargs -n1 git checkout --
          fi

          [ "${{inputs.clean}}" == "true" ] && git clean -ffdx
          cd ../
        else
          git worktree add "${GITHUB_REF_NAME}"
        fi

        # if repo uses lfs or has submodules

        cd ${GITHUB_REF_NAME}

        # be able to have worktree specific config like e.g. hooks
        git config extensions.worktreeConfig true
        git config --worktree core.bare false

        git reset --hard "origin/${GITHUB_REF_NAME}"

        git branch --set-upstream-to=origin/${GITHUB_REF_NAME} ${GITHUB_REF_NAME}
        git submodule update --init --recursive
        git lfs && git lfs pull
        cd ..
